#!/bin/bash

# Live Version -- An insurance system for your precious work.
#
# Copyright 2014 Anupam Arohi. All rights reserved.
#
# Original blog post presenting this system is found at: 
# http://lv.anupam-arohi.com/
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met: 
#
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY ANUPAM AROHI ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL ANUPAM AROHI OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# The views and conclusions contained in the software and documentation are
# those of the authors and should not be interpreted as representing official
# policies, either expressed or implied, of Anupam Arohi
#

# Syntax check
if [ -z "$2" ]; then
    echo "Usage: $0 /full/source/path /full/destination/path [/log/file] [your@email.address]"
    echo "Note: If you provide an email address, please also provide a log file."
    echo
    exit 1
fi

# Variables
SRC="${1%/}" # Remove trailing slashes from source path
DES="${2%/}" # Remove trailing slashes from destination path
LOG="$3"
EMAIL="$4"
lvDIR="$DES/.lv"

# Function to cleanup unused git branches
function cleanup {
    cd "$lvDIR"

    # Set default days/weeks to keep if not already set
    [ ! -f days_to_keep ] && echo "4" > days_to_keep
    [ ! -f weeks_to_keep ] && echo "2" > weeks_to_keep

    tail -n "$(cat days_to_keep)" keep_branch_days > temp
    mv temp keep_branch_days

    tail -n "$(cat weeks_to_keep)" keep_branch_weeks > temp
    mv temp keep_branch_weeks

    cd -

    # Delete branches not in keep lists
    git branch --list | grep -v "$(cat "$lvDIR"/keep_branch*)" | xargs -I Branch git branch -D Branch

    # Purge extra objects in git
    rm -rf .git/refs/original/*
    git reflog expire --all --expire-unreachable=0
    git repack -A -d
    git prune
}

# Function to email log file
function email_log {
    if [ -n "$EMAIL" ]; then
        mailx -s "Live Version | `hostname` | $SRC --> $DES" $EMAIL < "$LOG"
    fi
}

# Handle errors
function on_error {
    email_log
    exit 1
}

trap on_error ERR

# Logging setup
if [ -n "$LOG" ]; then
    exec > >(tee "$LOG")  # Use tee to log output
    exec 2>&1
fi

echo "-- Live Version started at: $(date) --"
echo "$SRC --> $DES"
echo

today=$(date "+%d-%b-%Y") # e.g. 17-Jul-2014
thisWeek="W$(date "+%V-%Y")" # e.g. W29-2014

# Setup Live Repository if not already set
if [ ! -d "$lvDIR" ]; then
    echo "Setting up Live Repository..."
    mkdir -p "$lvDIR"
    cd "$DES"

    echo ".lv/" > .gitignore  # Ignore live version files

    cd "$lvDIR"

    echo "$today" > previousDay
    echo "$thisWeek" > previousWeek

    echo "master" > keep_branch_always
    echo "$thisWeek" > keep_branch_weeks

    # Exclude files from rsync and diff
    cp "$HOME/.LiveVersion/exclude_rsync" .
    cp "$HOME/.LiveVersion/exclude_diff" .
    cp "$HOME/.LiveVersion/days_to_keep" .
    cp "$HOME/.LiveVersion/weeks_to_keep" .

    cd ..  # lvDIR -> $DES

    git init
    git add . -Av
    git commit -m "Live Repository initialized!"

    git branch "$thisWeek"
    git branch "$today"

    git log -1 | head -1 | cut -f2 -d' ' > "$lvDIR"/lastSHA

    echo "Live Repository is ready in $DES."
    echo
else
    # Ensure diff check before proceeding
    if [ ! -f "$lvDIR/exclude_diff" ]; then
        if [ -f "$HOME/.LiveVersion/exclude_diff" ]; then
            cp "$HOME/.LiveVersion/exclude_diff" "$lvDIR/"
        else
            echo "File exclude_diff is missing. Download live-version again and run setup."
            exit 1
        fi
    fi

    DFNAME=$(basename "$SRC") # Get folder name from source path
    DIFF=$(diff -rwq --exclude-from "$lvDIR/exclude_diff" "$SRC" "$DES/$DFNAME" | head -1)

    if [ -z "$DIFF" ]; then
        echo "$SRC unchanged since last sync, terminating."
        echo "-- Live Version terminated at: $(date) --"
        exit 0
    fi
fi

# Load previous day/week and last commit SHA
previousDay=$(cat "$lvDIR"/previousDay)
previousWeek=$(cat "$lvDIR"/previousWeek)
lastSHA=$(cat "$lvDIR"/lastSHA)

cd "$DES"

currentSHA=$(git log -1 | head -1 | cut -f2 -d' ')

# Ensure recovery from previous SHA if needed
if [ "$currentSHA" != "$lastSHA" ]; then
    git checkout "$lastSHA"
fi

# Daily roll-up
if [ "$today" != "$previousDay" ]; then
    echo "------------------------------------------"
    echo "Rolling up daily commits."
    echo "------------------------------------------"

    git checkout "$previousWeek"
    git merge "$previousDay" --squash -s recursive -X theirs
    git commit -vam "$previousDay (After daily rollup)" || true

    # Check if today's branch exists
    if ! git rev-parse --verify "$today" > /dev/null 2>&1; then
        git branch "$today"
    else
        echo "Branch '$today' already exists, checking it out."
        git checkout "$today"
    fi

    echo "$today" >> "$lvDIR"/keep_branch_days
    cleanup
fi

# Weekly roll-up
if [ "$thisWeek" != "$previousWeek" ]; then
    echo "------------------------------------------"
    echo "Rolling up Weekly commits."
    echo "------------------------------------------"

    git checkout master
    git merge "$previousWeek" --squash -s recursive -X theirs
    git commit -vam "$previousWeek (After weekly rollup)" || true

    # Check if this week's branch exists
    if ! git rev-parse --verify "$thisWeek" > /dev/null 2>&1; then
        git branch "$thisWeek"
    else
        echo "Branch '$thisWeek' already exists, checking it out."
        git checkout "$thisWeek"
    fi

    echo "$thisWeek" >> "$lvDIR"/keep_branch_weeks
    cleanup
fi

# Sync with rsync
git checkout "$today"
rsync -aruvh --delete --exclude-from "$lvDIR/exclude_rsync" "$SRC" "$DES"

git add . -Av
git commit -m "After Sync. [$(date)]" || true
git log -1 | head -1 | cut -f2 -d' ' > "$lvDIR"/lastSHA

# Update timestamps
echo "$today" > "$lvDIR"/previousDay
echo "$thisWeek" > "$lvDIR"/previousWeek

echo "-- Live Version ended at: $(date) --"

# Optional email notification for changes
if [ -n "$EMAIL" ] && [ -f "$lvDIR/always_email_log" ]; then
    nothingChanged=$(grep "nothing to commit" "$LOG")
    if [ -z "$nothingChanged" ]; then
        email_log
    fi
fi

