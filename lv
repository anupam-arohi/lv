#!/bin/bash

# Live Version -- An insurance system for your precious work.
#
# Copyright 2014 Anupam Arohi. All rights reserved.
#
# Original blog post presenting this system is found at: 
# http://lv.anupam-arohi.com/
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met: 
#
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY ANUPAM AROHI ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL ANUPAM AROHI OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# The views and conclusions contained in the software and documentation are
# those of the authors and should not be interpreted as representing official
# policies, either expressed or implied, of Anupam Arohi
#

# Syntax check
if [ -z "$2" ]; then
	echo "Usage: $0 /full/source/path /full/destination/path [/log/file] [your@email.address]"
	echo "Note: If you give email address, please also give log file."
	echo
	exit
fi

# Variables
SRC=`echo "${1%/}"`                              # delete trailing slashes for rsync
DES=`echo "${2%/}"` 
LOG="$3"
EMAIL="$4"
lvDIR="$DES/.lv"

# delete the git branches from live repository that are no longer relevant
function cleanup {

	cd "$lvDIR"

	if [ ! -f days_to_keep ]; then
		echo "4" > days_to_keep
	fi

	if [ ! -f weeks_to_keep ]; then
		echo "2" > weeks_to_keep
	fi

	tail -`cat days_to_keep` keep_branch_days >temp
	mv temp keep_branch_days

	tail -`cat weeks_to_keep` keep_branch_weeks >temp
	mv temp keep_branch_weeks

	cd -

	git branch --list | grep -v "`cat "$lvDIR"/keep_branch*`" | xargs -I Branch git branch -D Branch

	# purge extra objects from git repository, has significant impact specially on large repositories
	rm -rf .git/refs/original/*
	git reflog expire --all --expire-unreachable=0
	git repack -A -d
	git prune
}

function email_log() { 									  
	if [ ! -z "$EMAIL" ]; then
			mailx -s "Live Version | `hostname` | $SRC --> $DES" $EMAIL < "$LOG"
	fi
}

function on_error() {
	email_log
	exit
}

trap on_error ERR

# Logging
if [ ! -z "$LOG" ]; then
	exec > >(tee "$LOG")									 # use tee -a to append to log file
	exec 2>&1
fi

echo 
echo "-- Live Version started at   : `date` --"
echo 
echo "$SRC --> $DES"
echo 

today=`date "+%d-%b-%Y"`       # e.g. 17-Jul-2014
thisWeek="W`date "+%V-%Y"`"    # e.g. W29-2014

# Setup
if [ ! -d "$lvDIR" ]; then

	echo "Setting up Live Repository"

	mkdir -p "$lvDIR"
	cd "$DES"

	echo ".lv/" > .gitignore								# we don't want to track maintenance files

	cd "$lvDIR"

	echo $today					 > previousDay  
	echo $thisWeek				 > previousWeek

	# Keep these branches while deleting others
	echo "master"				 > keep_branch_always   # Manually edit this file to preserve specific branch(es)
	echo $thisWeek				 > keep_branch_weeks

   # Exclude these patterns while copying using rsync
	cp $HOME/.LiveVersion/exclude_rsync .
	cp $HOME/.LiveVersion/exclude_diff .
	cp $HOME/.LiveVersion/days_to_keep .
	cp $HOME/.LiveVersion/weeks_to_keep .

	cd .. #  lvDIR -> $DES

	git init
	git add . -Av
	git commit -m "Live Repository initialized!"

	git branch $thisWeek
	git branch $today

	git log  -1 | head -1 | cut -f2 -d' ' > "$lvDIR"/lastSHA 

	echo "Live Repository is ready in $DES."
	echo
# Setup - X -
else
	# Check if it makes sense to execute further
	# exclude_diff is like exclude_rsync but made for diff command
	# even when one of excluded files is updated, rsync would execute
	# We don't want live version to execute in this case, so we use diff to check the state of files.

	if [ ! -f $lvDIR/exclude_diff ]; then
		if [ -f $HOME/.LiveVersion/exclude_diff ]; then
			cp $HOME/.LiveVersion/exclude_diff $lvDIR/
		else
			echo "File exclude_diff is missing, download live-version again and run setup"
			exit
		fi
	fi
	DFNAME=`echo "$SRC" | rev | cut -d'/' -f1 | rev` # destination folder name without the path
	DIFF=`diff -rwq --exclude-from $lvDIR/exclude_diff "$SRC" "$DES/$DFNAME" | head -1`

	if [ -z "$DIFF" ]; then
		echo "$SRC unchanged since last sync, terminating."
		echo
		echo "-- Live Version terminated at: `date` --"
		exit
	fi
fi

# load logged time stamp in variables
previousDay=`cat "$lvDIR"/previousDay`
previousWeek=`cat "$lvDIR"/previousWeek`
lastSHA=`cat "$lvDIR"/lastSHA` 							  # It will act as recovery point in case you checked out some other sha

cd "$DES"

currentSHA=`git log  -1 | head -1 | cut -f2 -d' '`
if [ "$currentSHA" != "$lastSHA" ]; then
	git checkout $lastSHA
fi

# Daily Roll up
if [ "$today" != "$previousDay" ]; then

	echo "------------------------------------------"
	echo "Rolling up daily commits."
	echo "------------------------------------------"

	git checkout $previousWeek 
	git merge $previousDay --squash -s recursive -X theirs
	git commit -vam "$previousDay (After daily rollup)" || true # git commit returns error when there is nothing to commit, which is a normal usecase for live version
	git checkout -b $today 

	# update branches to keep
	echo $today          >> "$lvDIR"/keep_branch_days

	cleanup # Take this off if you would like to keep daily commits for a week
fi
# Daily Roll up - X -

# Weekly Roll up, it'll happen after daily roll up
if [ "$thisWeek" != "$previousWeek" ]; then

	echo "------------------------------------------"
	echo "Rolling up Weekly commits."
	echo "------------------------------------------"

	git checkout master
	git merge $previousWeek --squash -s recursive -X theirs 
	git commit -vam "$previousWeek (After weekly rollup)" || true 
	git checkout -b $thisWeek 

	# update branches to keep
	echo $thisWeek        >> "$lvDIR"/keep_branch_weeks
	cleanup
fi
# Weekly Roll up - X -

#  Sync
git checkout $today 
rsync -aruvh --delete --exclude-from "$lvDIR"/exclude_rsync "$SRC" "$DES" # Add more excludes as per your needs to exclude_rsync
#  Sync - X - 

git add . -Av 
git commit -m "After Sync. [`date`]" || true 
git log  -1 | head -1 | cut -f2 -d' ' > "$lvDIR"/lastSHA

# update logged time stamp when all went well
echo $today    > "$lvDIR"/previousDay
echo $thisWeek > "$lvDIR"/previousWeek

echo
echo "-- Live Version ended at     : `date` --"


# in case you're watching folders that change seldom and you want to be
# informed whenever they do, add an empty file named "always_email_log" in .lv folder
# of destination directory.
if [ ! -z "$EMAIL" ] && [ -f $lvDIR/always_email_log ]; then
	nothingChanged=`grep "nothing to commit" $LOG`
	if [ -z "$nothingChanged" ]; then
		email_log
	fi
fi

